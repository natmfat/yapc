generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  avatarUrl String
  bannerUrl String

  email     String     @unique
  username  String     @unique
  firstName String?
  lastName  String?
  bio       String?
  roles     UserRole[] @default([])

  socialTwitter String?
  socialGitHub  String?
  socialDiscord String?
  socialYouTube String?
  socialWebsite String?

  onboardingComplete Boolean @default(false)

  createdAt DateTime @default(now())

  providers     UserProvider[]
  posts         Post[]
  notifications Notification[]
  comments      Comment[]
}

enum UserRole {
  CORE
  DEVELOPER
  EARLY_ACCESS
}

// connected accounts
model UserProvider {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  strategy UserProviderStrategy

  // connection identifier & password/authorization token
  profileId       String
  profilePassword String
}

enum UserProviderStrategy {
  GOOGLE
  DISCORD
  GITHUB
  FORM
}

model Notification {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  body String
}

model Post {
  id Int @id @default(autoincrement())

  author   User? @relation(fields: [authorId], references: [id])
  authorId Int?

  published Boolean @default(false)

  type         PostType
  slug         String
  thumbnailUrl String
  heading      String   @db.VarChar(255)
  body         String?
  embed        String?

  stars    Int       @default(0)
  views    Int       @default(0)
  comments Comment[]
  tags     Tag[]

  featureRequest FeatureRequest?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostType {
  UPDATE
  PROJECT
  ARTICLE
}

model Tag {
  id       Int     @id @default(autoincrement())
  name     String
  official Boolean @default(false)
  posts    Post[]
}

model Comment {
  id       Int  @id @default(autoincrement())
  author   User @relation(fields: [authorId], references: [id])
  authorId Int
  post     Post @relation(fields: [postId], references: [id])
  postId   Int

  body  Int
  stars Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeatureRequest {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @unique

  approved Boolean @default(false)
  body     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
